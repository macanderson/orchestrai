# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class LicenseActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.License]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await License.prisma().query_raw(
            'SELECT * FROM License WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.License
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await License.prisma().query_first(
            'SELECT * FROM License WHERE type = $1',
            enums.LicenseType.FREE,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.LicenseCreateInput,
        include: Optional[types.LicenseInclude] = None
    ) -> _PrismaModelT:
        """Create a new License record.

        Parameters
        ----------
        data
            License record data
        include
            Specifies which relations should be loaded on the returned License model

        Returns
        -------
        prisma.models.License
            The created License record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a License record from just the required fields
        license = await License.prisma().create(
            data={
                # data to create a License record
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.LicenseCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple License records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of License record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await License.prisma().create_many(
            data=[
                {
                    # data to create a License record
                },
                {
                    # data to create a License record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.LicenseWhereUniqueInput,
        include: Optional[types.LicenseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single License record.

        Parameters
        ----------
        where
            License filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned License model

        Returns
        -------
        prisma.models.License
            The deleted License record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        license = await License.prisma().delete(
            where={
                'id': 'dhheabfhf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.LicenseWhereUniqueInput,
        include: Optional[types.LicenseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique License record.

        Parameters
        ----------
        where
            License filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned License model

        Returns
        -------
        prisma.models.License
            The found License record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        license = await License.prisma().find_unique(
            where={
                'id': 'ggciceaie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.LicenseWhereUniqueInput,
        include: Optional[types.LicenseInclude] = None
    ) -> _PrismaModelT:
        """Find a unique License record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            License filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned License model

        Returns
        -------
        prisma.models.License
            The found License record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        license = await License.prisma().find_unique_or_raise(
            where={
                'id': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LicenseWhereInput] = None,
        cursor: Optional[types.LicenseWhereUniqueInput] = None,
        include: Optional[types.LicenseInclude] = None,
        order: Optional[Union[types.LicenseOrderByInput, List[types.LicenseOrderByInput]]] = None,
        distinct: Optional[List[types.LicenseScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple License records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of License records returned
        skip
            Ignore the first N results
        where
            License filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned License model
        order
            Order the returned License records by any field
        distinct
            Filter License records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.License]
            The list of all License records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 License records
        licenses = await License.prisma().find_many(take=10)

        # find the first 5 License records ordered by the createdAt field
        licenses = await License.prisma().find_many(
            take=5,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.LicenseWhereInput] = None,
        cursor: Optional[types.LicenseWhereUniqueInput] = None,
        include: Optional[types.LicenseInclude] = None,
        order: Optional[Union[types.LicenseOrderByInput, List[types.LicenseOrderByInput]]] = None,
        distinct: Optional[List[types.LicenseScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single License record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            License filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned License model
        order
            Order the returned License records by any field
        distinct
            Filter License records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.License
            The first License record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second License record ordered by the updatedAt field
        license = await License.prisma().find_first(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.LicenseWhereInput] = None,
        cursor: Optional[types.LicenseWhereUniqueInput] = None,
        include: Optional[types.LicenseInclude] = None,
        order: Optional[Union[types.LicenseOrderByInput, List[types.LicenseOrderByInput]]] = None,
        distinct: Optional[List[types.LicenseScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single License record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            License filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned License model
        order
            Order the returned License records by any field
        distinct
            Filter License records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.License
            The first License record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second License record ordered by the deleted field
        license = await License.prisma().find_first_or_raise(
            skip=1,
            order={
                'deleted': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.LicenseUpdateInput,
        where: types.LicenseWhereUniqueInput,
        include: Optional[types.LicenseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single License record.

        Parameters
        ----------
        data
            License record data specifying what to update
        where
            License filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned License model

        Returns
        -------
        prisma.models.License
            The updated License record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        license = await License.prisma().update(
            where={
                'id': 'cadfabfehe',
            },
            data={
                # data to update the License record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.LicenseWhereUniqueInput,
        data: types.LicenseUpsertInput,
        include: Optional[types.LicenseInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            License filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned License model

        Returns
        -------
        prisma.models.License
            The created or updated License record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        license = await License.prisma().upsert(
            where={
                'id': 'dgiiaaijj',
            },
            data={
                'create': {
                    'id': 'dgiiaaijj',
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.LicenseUpdateManyMutationInput,
        where: types.LicenseWhereInput,
    ) -> int:
        """Update multiple License records

        Parameters
        ----------
        data
            License data to update the selected License records to
        where
            Filter to select the License records to update

        Returns
        -------
        int
            The total number of License records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all License records
        total = await License.prisma().update_many(
            data={
                'deletedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LicenseWhereInput] = None,
        cursor: Optional[types.LicenseWhereUniqueInput] = None,
    ) -> int:
        """Count the number of License records present in the database

        Parameters
        ----------
        select
            Select the License fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            License filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LicenseCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await License.prisma().count()

        # results: prisma.types.LicenseCountAggregateOutput
        results = await License.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.LicenseCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LicenseWhereInput] = None,
        cursor: Optional[types.LicenseWhereUniqueInput] = None,
    ) -> types.LicenseCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.LicenseCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LicenseWhereInput] = None,
        cursor: Optional[types.LicenseWhereUniqueInput] = None,
    ) -> Union[int, types.LicenseCountAggregateOutput]:
        """Count the number of License records present in the database

        Parameters
        ----------
        select
            Select the License fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            License filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LicenseCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await License.prisma().count()

        # results: prisma.types.LicenseCountAggregateOutput
        results = await License.prisma().count(
            select={
                '_all': True,
                'type': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.LicenseCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.LicenseWhereInput] = None
    ) -> int:
        """Delete multiple License records.

        Parameters
        ----------
        where
            Optional License filter to find the records to be deleted

        Returns
        -------
        int
            The total number of License records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all License records
        total = await License.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.LicenseScalarFieldKeysT'],
        *,
        where: Optional['types.LicenseWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.LicenseAvgAggregateInput'] = None,
        sum: Optional['types.LicenseSumAggregateInput'] = None,
        min: Optional['types.LicenseMinAggregateInput'] = None,
        max: Optional['types.LicenseMaxAggregateInput'] = None,
        having: Optional['types.LicenseScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.LicenseCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.LicenseScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.LicenseScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.LicenseGroupByOutput']:
        """Group License records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar License fields to group records by
        where
            License filter to select records
        take
            Limit the maximum number of License records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.LicenseGroupByOutput]
            A list of dictionaries representing the License record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group License records by createdAt values
        # and count how many records are in each group
        results = await License.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class TenantActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Tenant]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Tenant.prisma().query_raw(
            'SELECT * FROM Tenant WHERE id = $1',
            'bfaiacjjfc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Tenant
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Tenant.prisma().query_first(
            'SELECT * FROM Tenant WHERE name = $1',
            'eigcfgbif',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.TenantCreateInput,
        include: Optional[types.TenantInclude] = None
    ) -> _PrismaModelT:
        """Create a new Tenant record.

        Parameters
        ----------
        data
            Tenant record data
        include
            Specifies which relations should be loaded on the returned Tenant model

        Returns
        -------
        prisma.models.Tenant
            The created Tenant record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Tenant record from just the required fields
        tenant = await Tenant.prisma().create(
            data={
                # data to create a Tenant record
                'name': 'bagcfbhiig',
                'slug': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.TenantCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Tenant records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Tenant record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Tenant.prisma().create_many(
            data=[
                {
                    # data to create a Tenant record
                    'name': 'biabhbdai',
                    'slug': 'idghgaicb',
                },
                {
                    # data to create a Tenant record
                    'name': 'fjfddhigg',
                    'slug': 'hjaecfifb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.TenantWhereUniqueInput,
        include: Optional[types.TenantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Tenant record.

        Parameters
        ----------
        where
            Tenant filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Tenant model

        Returns
        -------
        prisma.models.Tenant
            The deleted Tenant record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        tenant = await Tenant.prisma().delete(
            where={
                'id': 'cbbbjbfcii',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.TenantWhereUniqueInput,
        include: Optional[types.TenantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Tenant record.

        Parameters
        ----------
        where
            Tenant filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Tenant model

        Returns
        -------
        prisma.models.Tenant
            The found Tenant record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        tenant = await Tenant.prisma().find_unique(
            where={
                'id': 'bbejhfidcb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.TenantWhereUniqueInput,
        include: Optional[types.TenantInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Tenant record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Tenant filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Tenant model

        Returns
        -------
        prisma.models.Tenant
            The found Tenant record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        tenant = await Tenant.prisma().find_unique_or_raise(
            where={
                'id': 'bgeecijdgg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TenantWhereInput] = None,
        cursor: Optional[types.TenantWhereUniqueInput] = None,
        include: Optional[types.TenantInclude] = None,
        order: Optional[Union[types.TenantOrderByInput, List[types.TenantOrderByInput]]] = None,
        distinct: Optional[List[types.TenantScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Tenant records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Tenant records returned
        skip
            Ignore the first N results
        where
            Tenant filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Tenant model
        order
            Order the returned Tenant records by any field
        distinct
            Filter Tenant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Tenant]
            The list of all Tenant records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Tenant records
        tenants = await Tenant.prisma().find_many(take=10)

        # find the first 5 Tenant records ordered by the slug field
        tenants = await Tenant.prisma().find_many(
            take=5,
            order={
                'slug': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TenantWhereInput] = None,
        cursor: Optional[types.TenantWhereUniqueInput] = None,
        include: Optional[types.TenantInclude] = None,
        order: Optional[Union[types.TenantOrderByInput, List[types.TenantOrderByInput]]] = None,
        distinct: Optional[List[types.TenantScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Tenant record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Tenant filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Tenant model
        order
            Order the returned Tenant records by any field
        distinct
            Filter Tenant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Tenant
            The first Tenant record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Tenant record ordered by the billingEmail field
        tenant = await Tenant.prisma().find_first(
            skip=1,
            order={
                'billingEmail': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TenantWhereInput] = None,
        cursor: Optional[types.TenantWhereUniqueInput] = None,
        include: Optional[types.TenantInclude] = None,
        order: Optional[Union[types.TenantOrderByInput, List[types.TenantOrderByInput]]] = None,
        distinct: Optional[List[types.TenantScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Tenant record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Tenant filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Tenant model
        order
            Order the returned Tenant records by any field
        distinct
            Filter Tenant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Tenant
            The first Tenant record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Tenant record ordered by the billingPhone field
        tenant = await Tenant.prisma().find_first_or_raise(
            skip=1,
            order={
                'billingPhone': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.TenantUpdateInput,
        where: types.TenantWhereUniqueInput,
        include: Optional[types.TenantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Tenant record.

        Parameters
        ----------
        data
            Tenant record data specifying what to update
        where
            Tenant filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Tenant model

        Returns
        -------
        prisma.models.Tenant
            The updated Tenant record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        tenant = await Tenant.prisma().update(
            where={
                'id': 'bdiicjafbj',
            },
            data={
                # data to update the Tenant record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.TenantWhereUniqueInput,
        data: types.TenantUpsertInput,
        include: Optional[types.TenantInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Tenant filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Tenant model

        Returns
        -------
        prisma.models.Tenant
            The created or updated Tenant record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        tenant = await Tenant.prisma().upsert(
            where={
                'id': 'bgehebiafc',
            },
            data={
                'create': {
                    'id': 'bgehebiafc',
                    'name': 'fjfddhigg',
                    'slug': 'hjaecfifb',
                },
                'update': {
                    'name': 'fjfddhigg',
                    'slug': 'hjaecfifb',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.TenantUpdateManyMutationInput,
        where: types.TenantWhereInput,
    ) -> int:
        """Update multiple Tenant records

        Parameters
        ----------
        data
            Tenant data to update the selected Tenant records to
        where
            Filter to select the Tenant records to update

        Returns
        -------
        int
            The total number of Tenant records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Tenant records
        total = await Tenant.prisma().update_many(
            data={
                'billingAddress': 'bghffegacj'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TenantWhereInput] = None,
        cursor: Optional[types.TenantWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Tenant records present in the database

        Parameters
        ----------
        select
            Select the Tenant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Tenant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TenantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Tenant.prisma().count()

        # results: prisma.types.TenantCountAggregateOutput
        results = await Tenant.prisma().count(
            select={
                '_all': True,
                'billingAddress2': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.TenantCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TenantWhereInput] = None,
        cursor: Optional[types.TenantWhereUniqueInput] = None,
    ) -> types.TenantCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.TenantCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TenantWhereInput] = None,
        cursor: Optional[types.TenantWhereUniqueInput] = None,
    ) -> Union[int, types.TenantCountAggregateOutput]:
        """Count the number of Tenant records present in the database

        Parameters
        ----------
        select
            Select the Tenant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Tenant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TenantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Tenant.prisma().count()

        # results: prisma.types.TenantCountAggregateOutput
        results = await Tenant.prisma().count(
            select={
                '_all': True,
                'billingCity': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TenantCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.TenantWhereInput] = None
    ) -> int:
        """Delete multiple Tenant records.

        Parameters
        ----------
        where
            Optional Tenant filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Tenant records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Tenant records
        total = await Tenant.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.TenantScalarFieldKeysT'],
        *,
        where: Optional['types.TenantWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TenantAvgAggregateInput'] = None,
        sum: Optional['types.TenantSumAggregateInput'] = None,
        min: Optional['types.TenantMinAggregateInput'] = None,
        max: Optional['types.TenantMaxAggregateInput'] = None,
        having: Optional['types.TenantScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TenantCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TenantScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.TenantScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.TenantGroupByOutput']:
        """Group Tenant records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Tenant fields to group records by
        where
            Tenant filter to select records
        take
            Limit the maximum number of Tenant records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TenantGroupByOutput]
            A list of dictionaries representing the Tenant record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Tenant records by billingState values
        # and count how many records are in each group
        results = await Tenant.prisma().group_by(
            ['billingState'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserRoleActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserRole]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserRole.prisma().query_raw(
            'SELECT * FROM UserRole WHERE id = $1',
            'bhghchehcc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserRole
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserRole.prisma().query_first(
            'SELECT * FROM UserRole WHERE name = $1',
            'dcgchcbbf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserRoleCreateInput,
        include: Optional[types.UserRoleInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserRole record.

        Parameters
        ----------
        data
            UserRole record data
        include
            Specifies which relations should be loaded on the returned UserRole model

        Returns
        -------
        prisma.models.UserRole
            The created UserRole record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserRole record from just the required fields
        userrole = await UserRole.prisma().create(
            data={
                # data to create a UserRole record
                'name': 'bdedcabahc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserRoleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserRole records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserRole record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserRole.prisma().create_many(
            data=[
                {
                    # data to create a UserRole record
                    'name': 'ghfhiafcb',
                },
                {
                    # data to create a UserRole record
                    'name': 'heejgedji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserRoleWhereUniqueInput,
        include: Optional[types.UserRoleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserRole record.

        Parameters
        ----------
        where
            UserRole filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserRole model

        Returns
        -------
        prisma.models.UserRole
            The deleted UserRole record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userrole = await UserRole.prisma().delete(
            where={
                'id': 'bjgjgibgbf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserRoleWhereUniqueInput,
        include: Optional[types.UserRoleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserRole record.

        Parameters
        ----------
        where
            UserRole filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserRole model

        Returns
        -------
        prisma.models.UserRole
            The found UserRole record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userrole = await UserRole.prisma().find_unique(
            where={
                'id': 'bbbgbhfjge',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserRoleWhereUniqueInput,
        include: Optional[types.UserRoleInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserRole record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserRole filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserRole model

        Returns
        -------
        prisma.models.UserRole
            The found UserRole record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userrole = await UserRole.prisma().find_unique_or_raise(
            where={
                'id': 'igbehcbab',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserRoleWhereInput] = None,
        cursor: Optional[types.UserRoleWhereUniqueInput] = None,
        include: Optional[types.UserRoleInclude] = None,
        order: Optional[Union[types.UserRoleOrderByInput, List[types.UserRoleOrderByInput]]] = None,
        distinct: Optional[List[types.UserRoleScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserRole records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserRole records returned
        skip
            Ignore the first N results
        where
            UserRole filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserRole model
        order
            Order the returned UserRole records by any field
        distinct
            Filter UserRole records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserRole]
            The list of all UserRole records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserRole records
        userroles = await UserRole.prisma().find_many(take=10)

        # find the first 5 UserRole records ordered by the type field
        userroles = await UserRole.prisma().find_many(
            take=5,
            order={
                'type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserRoleWhereInput] = None,
        cursor: Optional[types.UserRoleWhereUniqueInput] = None,
        include: Optional[types.UserRoleInclude] = None,
        order: Optional[Union[types.UserRoleOrderByInput, List[types.UserRoleOrderByInput]]] = None,
        distinct: Optional[List[types.UserRoleScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserRole record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserRole filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserRole model
        order
            Order the returned UserRole records by any field
        distinct
            Filter UserRole records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserRole
            The first UserRole record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserRole record ordered by the permissions field
        userrole = await UserRole.prisma().find_first(
            skip=1,
            order={
                'permissions': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserRoleWhereInput] = None,
        cursor: Optional[types.UserRoleWhereUniqueInput] = None,
        include: Optional[types.UserRoleInclude] = None,
        order: Optional[Union[types.UserRoleOrderByInput, List[types.UserRoleOrderByInput]]] = None,
        distinct: Optional[List[types.UserRoleScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserRole record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserRole filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserRole model
        order
            Order the returned UserRole records by any field
        distinct
            Filter UserRole records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserRole
            The first UserRole record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserRole record ordered by the createdAt field
        userrole = await UserRole.prisma().find_first_or_raise(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserRoleUpdateInput,
        where: types.UserRoleWhereUniqueInput,
        include: Optional[types.UserRoleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserRole record.

        Parameters
        ----------
        data
            UserRole record data specifying what to update
        where
            UserRole filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserRole model

        Returns
        -------
        prisma.models.UserRole
            The updated UserRole record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        userrole = await UserRole.prisma().update(
            where={
                'id': 'bdadaadhag',
            },
            data={
                # data to update the UserRole record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserRoleWhereUniqueInput,
        data: types.UserRoleUpsertInput,
        include: Optional[types.UserRoleInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserRole filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserRole model

        Returns
        -------
        prisma.models.UserRole
            The created or updated UserRole record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userrole = await UserRole.prisma().upsert(
            where={
                'id': 'bgiggdidbf',
            },
            data={
                'create': {
                    'id': 'bgiggdidbf',
                    'name': 'heejgedji',
                },
                'update': {
                    'name': 'heejgedji',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserRoleUpdateManyMutationInput,
        where: types.UserRoleWhereInput,
    ) -> int:
        """Update multiple UserRole records

        Parameters
        ----------
        data
            UserRole data to update the selected UserRole records to
        where
            Filter to select the UserRole records to update

        Returns
        -------
        int
            The total number of UserRole records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserRole records
        total = await UserRole.prisma().update_many(
            data={
                'updatedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserRoleWhereInput] = None,
        cursor: Optional[types.UserRoleWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserRole records present in the database

        Parameters
        ----------
        select
            Select the UserRole fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserRole filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserRoleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserRole.prisma().count()

        # results: prisma.types.UserRoleCountAggregateOutput
        results = await UserRole.prisma().count(
            select={
                '_all': True,
                'deleted': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserRoleCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserRoleWhereInput] = None,
        cursor: Optional[types.UserRoleWhereUniqueInput] = None,
    ) -> types.UserRoleCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserRoleCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserRoleWhereInput] = None,
        cursor: Optional[types.UserRoleWhereUniqueInput] = None,
    ) -> Union[int, types.UserRoleCountAggregateOutput]:
        """Count the number of UserRole records present in the database

        Parameters
        ----------
        select
            Select the UserRole fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserRole filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserRoleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserRole.prisma().count()

        # results: prisma.types.UserRoleCountAggregateOutput
        results = await UserRole.prisma().count(
            select={
                '_all': True,
                'deletedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserRoleCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserRoleWhereInput] = None
    ) -> int:
        """Delete multiple UserRole records.

        Parameters
        ----------
        where
            Optional UserRole filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserRole records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserRole records
        total = await UserRole.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserRoleScalarFieldKeysT'],
        *,
        where: Optional['types.UserRoleWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserRoleAvgAggregateInput'] = None,
        sum: Optional['types.UserRoleSumAggregateInput'] = None,
        min: Optional['types.UserRoleMinAggregateInput'] = None,
        max: Optional['types.UserRoleMaxAggregateInput'] = None,
        having: Optional['types.UserRoleScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserRoleCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserRoleScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.UserRoleScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.UserRoleGroupByOutput']:
        """Group UserRole records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserRole fields to group records by
        where
            UserRole filter to select records
        take
            Limit the maximum number of UserRole records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserRoleGroupByOutput]
            A list of dictionaries representing the UserRole record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserRole records by id values
        # and count how many records are in each group
        results = await UserRole.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            'caaaedabfc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE email = $1',
            'bigibebcib',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'email': 'bigaiehgcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'beeifcbebf',
                },
                {
                    # data to create a User record
                    'email': 'bgcigfahea',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 'bcejgaggif',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 'idfjadbcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 'hgdhbjhhj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the emailVerified field
        users = await User.prisma().find_many(
            take=5,
            order={
                'emailVerified': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the firstName field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'firstName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the lastName field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 'ecjjjfbae',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 'bhhfibbigf',
            },
            data={
                'create': {
                    'id': 'bhhfibbigf',
                    'email': 'bgcigfahea',
                },
                'update': {
                    'email': 'bgcigfahea',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'imageUrl': 'ijdbeffgg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'passwordHash': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'roleId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeysT'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by tenantId values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['tenantId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserSessionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserSession]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserSession.prisma().query_raw(
            'SELECT * FROM UserSession WHERE id = $1',
            'jjfeafhfj',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserSession
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserSession.prisma().query_first(
            'SELECT * FROM UserSession WHERE userId = $1',
            'cbachdgfce',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserSessionCreateInput,
        include: Optional[types.UserSessionInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserSession record.

        Parameters
        ----------
        data
            UserSession record data
        include
            Specifies which relations should be loaded on the returned UserSession model

        Returns
        -------
        prisma.models.UserSession
            The created UserSession record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserSession record from just the required fields
        usersession = await UserSession.prisma().create(
            data={
                # data to create a UserSession record
                'userId': 'chbfcacbd',
                'token': 'efggddide',
                'expiresAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserSessionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserSession records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserSession record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserSession.prisma().create_many(
            data=[
                {
                    # data to create a UserSession record
                    'userId': 'caficfigfb',
                    'token': 'bfidgijfjc',
                    'expiresAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a UserSession record
                    'userId': 'ihieecagf',
                    'token': 'bghfciaafe',
                    'expiresAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserSessionWhereUniqueInput,
        include: Optional[types.UserSessionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserSession record.

        Parameters
        ----------
        where
            UserSession filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserSession model

        Returns
        -------
        prisma.models.UserSession
            The deleted UserSession record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usersession = await UserSession.prisma().delete(
            where={
                'id': 'bgchfhgceh',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserSessionWhereUniqueInput,
        include: Optional[types.UserSessionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserSession record.

        Parameters
        ----------
        where
            UserSession filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserSession model

        Returns
        -------
        prisma.models.UserSession
            The found UserSession record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usersession = await UserSession.prisma().find_unique(
            where={
                'id': 'cafeiaccbc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserSessionWhereUniqueInput,
        include: Optional[types.UserSessionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserSession record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserSession filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserSession model

        Returns
        -------
        prisma.models.UserSession
            The found UserSession record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usersession = await UserSession.prisma().find_unique_or_raise(
            where={
                'id': 'gaddfhfh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserSessionWhereInput] = None,
        cursor: Optional[types.UserSessionWhereUniqueInput] = None,
        include: Optional[types.UserSessionInclude] = None,
        order: Optional[Union[types.UserSessionOrderByInput, List[types.UserSessionOrderByInput]]] = None,
        distinct: Optional[List[types.UserSessionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserSession records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserSession records returned
        skip
            Ignore the first N results
        where
            UserSession filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserSession model
        order
            Order the returned UserSession records by any field
        distinct
            Filter UserSession records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserSession]
            The list of all UserSession records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserSession records
        usersessions = await UserSession.prisma().find_many(take=10)

        # find the first 5 UserSession records ordered by the token field
        usersessions = await UserSession.prisma().find_many(
            take=5,
            order={
                'token': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserSessionWhereInput] = None,
        cursor: Optional[types.UserSessionWhereUniqueInput] = None,
        include: Optional[types.UserSessionInclude] = None,
        order: Optional[Union[types.UserSessionOrderByInput, List[types.UserSessionOrderByInput]]] = None,
        distinct: Optional[List[types.UserSessionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserSession record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserSession filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserSession model
        order
            Order the returned UserSession records by any field
        distinct
            Filter UserSession records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserSession
            The first UserSession record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserSession record ordered by the expiresAt field
        usersession = await UserSession.prisma().find_first(
            skip=1,
            order={
                'expiresAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserSessionWhereInput] = None,
        cursor: Optional[types.UserSessionWhereUniqueInput] = None,
        include: Optional[types.UserSessionInclude] = None,
        order: Optional[Union[types.UserSessionOrderByInput, List[types.UserSessionOrderByInput]]] = None,
        distinct: Optional[List[types.UserSessionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserSession record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserSession filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserSession model
        order
            Order the returned UserSession records by any field
        distinct
            Filter UserSession records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserSession
            The first UserSession record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserSession record ordered by the ipAddress field
        usersession = await UserSession.prisma().find_first_or_raise(
            skip=1,
            order={
                'ipAddress': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserSessionUpdateInput,
        where: types.UserSessionWhereUniqueInput,
        include: Optional[types.UserSessionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserSession record.

        Parameters
        ----------
        data
            UserSession record data specifying what to update
        where
            UserSession filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserSession model

        Returns
        -------
        prisma.models.UserSession
            The updated UserSession record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        usersession = await UserSession.prisma().update(
            where={
                'id': 'gieegcbeg',
            },
            data={
                # data to update the UserSession record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserSessionWhereUniqueInput,
        data: types.UserSessionUpsertInput,
        include: Optional[types.UserSessionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserSession filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserSession model

        Returns
        -------
        prisma.models.UserSession
            The created or updated UserSession record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usersession = await UserSession.prisma().upsert(
            where={
                'id': 'bgcffadich',
            },
            data={
                'create': {
                    'id': 'bgcffadich',
                    'userId': 'ihieecagf',
                    'token': 'bghfciaafe',
                    'expiresAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'userId': 'ihieecagf',
                    'token': 'bghfciaafe',
                    'expiresAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserSessionUpdateManyMutationInput,
        where: types.UserSessionWhereInput,
    ) -> int:
        """Update multiple UserSession records

        Parameters
        ----------
        data
            UserSession data to update the selected UserSession records to
        where
            Filter to select the UserSession records to update

        Returns
        -------
        int
            The total number of UserSession records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserSession records
        total = await UserSession.prisma().update_many(
            data={
                'userAgent': 'fcbichhci'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserSessionWhereInput] = None,
        cursor: Optional[types.UserSessionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserSession records present in the database

        Parameters
        ----------
        select
            Select the UserSession fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserSession filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserSessionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserSession.prisma().count()

        # results: prisma.types.UserSessionCountAggregateOutput
        results = await UserSession.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserSessionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserSessionWhereInput] = None,
        cursor: Optional[types.UserSessionWhereUniqueInput] = None,
    ) -> types.UserSessionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserSessionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserSessionWhereInput] = None,
        cursor: Optional[types.UserSessionWhereUniqueInput] = None,
    ) -> Union[int, types.UserSessionCountAggregateOutput]:
        """Count the number of UserSession records present in the database

        Parameters
        ----------
        select
            Select the UserSession fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserSession filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserSessionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserSession.prisma().count()

        # results: prisma.types.UserSessionCountAggregateOutput
        results = await UserSession.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserSessionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserSessionWhereInput] = None
    ) -> int:
        """Delete multiple UserSession records.

        Parameters
        ----------
        where
            Optional UserSession filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserSession records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserSession records
        total = await UserSession.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserSessionScalarFieldKeysT'],
        *,
        where: Optional['types.UserSessionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserSessionAvgAggregateInput'] = None,
        sum: Optional['types.UserSessionSumAggregateInput'] = None,
        min: Optional['types.UserSessionMinAggregateInput'] = None,
        max: Optional['types.UserSessionMaxAggregateInput'] = None,
        having: Optional['types.UserSessionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserSessionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserSessionScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.UserSessionScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.UserSessionGroupByOutput']:
        """Group UserSession records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserSession fields to group records by
        where
            UserSession filter to select records
        take
            Limit the maximum number of UserSession records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserSessionGroupByOutput]
            A list of dictionaries representing the UserSession record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserSession records by deleted values
        # and count how many records are in each group
        results = await UserSession.prisma().group_by(
            ['deleted'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CandidateActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Candidate]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Candidate.prisma().query_raw(
            'SELECT * FROM Candidate WHERE id = $1',
            'bcggadccgf',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Candidate
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Candidate.prisma().query_first(
            'SELECT * FROM Candidate WHERE firstName = $1',
            'jdcfdcgc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CandidateCreateInput,
        include: Optional[types.CandidateInclude] = None
    ) -> _PrismaModelT:
        """Create a new Candidate record.

        Parameters
        ----------
        data
            Candidate record data
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The created Candidate record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Candidate record from just the required fields
        candidate = await Candidate.prisma().create(
            data={
                # data to create a Candidate record
                'firstName': 'cafdaehjid',
                'lastName': 'gifdddbia',
                'email': 'bchehecef',
                'educationLevel': enums.EducationLevel.HIGH_SCHOOL,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CandidateCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Candidate records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Candidate record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Candidate.prisma().create_many(
            data=[
                {
                    # data to create a Candidate record
                    'firstName': 'jeijcbhfe',
                    'lastName': 'bjgejjabff',
                    'email': 'bcciijbibg',
                    'educationLevel': enums.EducationLevel.HIGH_SCHOOL,
                },
                {
                    # data to create a Candidate record
                    'firstName': 'cffcachfd',
                    'lastName': 'bccdfhdigc',
                    'email': 'febcgjbfj',
                    'educationLevel': enums.EducationLevel.HIGH_SCHOOL,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Candidate record.

        Parameters
        ----------
        where
            Candidate filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The deleted Candidate record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().delete(
            where={
                'id': 'bageiegghg',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Candidate record.

        Parameters
        ----------
        where
            Candidate filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The found Candidate record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().find_unique(
            where={
                'id': 'faidicegb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Candidate record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Candidate filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The found Candidate record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().find_unique_or_raise(
            where={
                'id': 'bacecgfhbe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
        include: Optional[types.CandidateInclude] = None,
        order: Optional[Union[types.CandidateOrderByInput, List[types.CandidateOrderByInput]]] = None,
        distinct: Optional[List[types.CandidateScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Candidate records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Candidate records returned
        skip
            Ignore the first N results
        where
            Candidate filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Candidate model
        order
            Order the returned Candidate records by any field
        distinct
            Filter Candidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Candidate]
            The list of all Candidate records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Candidate records
        candidates = await Candidate.prisma().find_many(take=10)

        # find the first 5 Candidate records ordered by the lastName field
        candidates = await Candidate.prisma().find_many(
            take=5,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
        include: Optional[types.CandidateInclude] = None,
        order: Optional[Union[types.CandidateOrderByInput, List[types.CandidateOrderByInput]]] = None,
        distinct: Optional[List[types.CandidateScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Candidate record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Candidate filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Candidate model
        order
            Order the returned Candidate records by any field
        distinct
            Filter Candidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Candidate
            The first Candidate record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Candidate record ordered by the email field
        candidate = await Candidate.prisma().find_first(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
        include: Optional[types.CandidateInclude] = None,
        order: Optional[Union[types.CandidateOrderByInput, List[types.CandidateOrderByInput]]] = None,
        distinct: Optional[List[types.CandidateScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Candidate record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Candidate filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Candidate model
        order
            Order the returned Candidate records by any field
        distinct
            Filter Candidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Candidate
            The first Candidate record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Candidate record ordered by the phone field
        candidate = await Candidate.prisma().find_first_or_raise(
            skip=1,
            order={
                'phone': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.CandidateUpdateInput,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Candidate record.

        Parameters
        ----------
        data
            Candidate record data specifying what to update
        where
            Candidate filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The updated Candidate record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        candidate = await Candidate.prisma().update(
            where={
                'id': 'ihcahiead',
            },
            data={
                # data to update the Candidate record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.CandidateWhereUniqueInput,
        data: types.CandidateUpsertInput,
        include: Optional[types.CandidateInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Candidate filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The created or updated Candidate record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().upsert(
            where={
                'id': 'biheheiajg',
            },
            data={
                'create': {
                    'id': 'biheheiajg',
                    'firstName': 'cffcachfd',
                    'lastName': 'bccdfhdigc',
                    'email': 'febcgjbfj',
                    'educationLevel': enums.EducationLevel.HIGH_SCHOOL,
                },
                'update': {
                    'firstName': 'cffcachfd',
                    'lastName': 'bccdfhdigc',
                    'email': 'febcgjbfj',
                    'educationLevel': enums.EducationLevel.HIGH_SCHOOL,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.CandidateUpdateManyMutationInput,
        where: types.CandidateWhereInput,
    ) -> int:
        """Update multiple Candidate records

        Parameters
        ----------
        data
            Candidate data to update the selected Candidate records to
        where
            Filter to select the Candidate records to update

        Returns
        -------
        int
            The total number of Candidate records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Candidate records
        total = await Candidate.prisma().update_many(
            data={
                'resumeUrl': 'jbgijghgb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Candidate records present in the database

        Parameters
        ----------
        select
            Select the Candidate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Candidate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CandidateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Candidate.prisma().count()

        # results: prisma.types.CandidateCountAggregateOutput
        results = await Candidate.prisma().count(
            select={
                '_all': True,
                'linkedinUrl': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CandidateCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
    ) -> types.CandidateCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CandidateCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
    ) -> Union[int, types.CandidateCountAggregateOutput]:
        """Count the number of Candidate records present in the database

        Parameters
        ----------
        select
            Select the Candidate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Candidate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CandidateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Candidate.prisma().count()

        # results: prisma.types.CandidateCountAggregateOutput
        results = await Candidate.prisma().count(
            select={
                '_all': True,
                'currentTitle': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CandidateCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CandidateWhereInput] = None
    ) -> int:
        """Delete multiple Candidate records.

        Parameters
        ----------
        where
            Optional Candidate filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Candidate records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Candidate records
        total = await Candidate.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CandidateScalarFieldKeysT'],
        *,
        where: Optional['types.CandidateWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CandidateAvgAggregateInput'] = None,
        sum: Optional['types.CandidateSumAggregateInput'] = None,
        min: Optional['types.CandidateMinAggregateInput'] = None,
        max: Optional['types.CandidateMaxAggregateInput'] = None,
        having: Optional['types.CandidateScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CandidateCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CandidateScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.CandidateScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.CandidateGroupByOutput']:
        """Group Candidate records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Candidate fields to group records by
        where
            Candidate filter to select records
        take
            Limit the maximum number of Candidate records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CandidateGroupByOutput]
            A list of dictionaries representing the Candidate record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Candidate records by currentCompany values
        # and count how many records are in each group
        results = await Candidate.prisma().group_by(
            ['currentCompany'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class JobActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Job]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Job.prisma().query_raw(
            'SELECT * FROM Job WHERE id = $1',
            'hgjcghfbi',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Job
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Job.prisma().query_first(
            'SELECT * FROM Job WHERE title = $1',
            'icadbcehj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.JobCreateInput,
        include: Optional[types.JobInclude] = None
    ) -> _PrismaModelT:
        """Create a new Job record.

        Parameters
        ----------
        data
            Job record data
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The created Job record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Job record from just the required fields
        job = await Job.prisma().create(
            data={
                # data to create a Job record
                'title': 'jchciaee',
                'tenantId': 'deeificjd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.JobCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Job records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Job record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Job.prisma().create_many(
            data=[
                {
                    # data to create a Job record
                    'title': 'bbcbhebbda',
                    'tenantId': 'bejfijgcfb',
                },
                {
                    # data to create a Job record
                    'title': 'caifcbgii',
                    'tenantId': 'igaibbfgj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Job record.

        Parameters
        ----------
        where
            Job filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The deleted Job record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().delete(
            where={
                'id': 'bggajdcbbi',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Job record.

        Parameters
        ----------
        where
            Job filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The found Job record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().find_unique(
            where={
                'id': 'fcfhgbjed',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Job record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Job filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The found Job record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().find_unique_or_raise(
            where={
                'id': 'hdgcajhjg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
        include: Optional[types.JobInclude] = None,
        order: Optional[Union[types.JobOrderByInput, List[types.JobOrderByInput]]] = None,
        distinct: Optional[List[types.JobScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Job records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Job records returned
        skip
            Ignore the first N results
        where
            Job filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Job model
        order
            Order the returned Job records by any field
        distinct
            Filter Job records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Job]
            The list of all Job records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Job records
        jobs = await Job.prisma().find_many(take=10)

        # find the first 5 Job records ordered by the status field
        jobs = await Job.prisma().find_many(
            take=5,
            order={
                'status': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
        include: Optional[types.JobInclude] = None,
        order: Optional[Union[types.JobOrderByInput, List[types.JobOrderByInput]]] = None,
        distinct: Optional[List[types.JobScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Job record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Job filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Job model
        order
            Order the returned Job records by any field
        distinct
            Filter Job records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Job
            The first Job record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Job record ordered by the description field
        job = await Job.prisma().find_first(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
        include: Optional[types.JobInclude] = None,
        order: Optional[Union[types.JobOrderByInput, List[types.JobOrderByInput]]] = None,
        distinct: Optional[List[types.JobScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Job record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Job filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Job model
        order
            Order the returned Job records by any field
        distinct
            Filter Job records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Job
            The first Job record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Job record ordered by the requirements field
        job = await Job.prisma().find_first_or_raise(
            skip=1,
            order={
                'requirements': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.JobUpdateInput,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Job record.

        Parameters
        ----------
        data
            Job record data specifying what to update
        where
            Job filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The updated Job record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        job = await Job.prisma().update(
            where={
                'id': 'ejdjahicb',
            },
            data={
                # data to update the Job record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.JobWhereUniqueInput,
        data: types.JobUpsertInput,
        include: Optional[types.JobInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Job filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The created or updated Job record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().upsert(
            where={
                'id': 'gdjgigfgc',
            },
            data={
                'create': {
                    'id': 'gdjgigfgc',
                    'title': 'caifcbgii',
                    'tenantId': 'igaibbfgj',
                },
                'update': {
                    'title': 'caifcbgii',
                    'tenantId': 'igaibbfgj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.JobUpdateManyMutationInput,
        where: types.JobWhereInput,
    ) -> int:
        """Update multiple Job records

        Parameters
        ----------
        data
            Job data to update the selected Job records to
        where
            Filter to select the Job records to update

        Returns
        -------
        int
            The total number of Job records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Job records
        total = await Job.prisma().update_many(
            data={
                'keywords': ['gfeaahdeh']
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Job records present in the database

        Parameters
        ----------
        select
            Select the Job fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Job filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.JobCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Job.prisma().count()

        # results: prisma.types.JobCountAggregateOutput
        results = await Job.prisma().count(
            select={
                '_all': True,
                'location': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.JobCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
    ) -> types.JobCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.JobCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
    ) -> Union[int, types.JobCountAggregateOutput]:
        """Count the number of Job records present in the database

        Parameters
        ----------
        select
            Select the Job fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Job filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.JobCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Job.prisma().count()

        # results: prisma.types.JobCountAggregateOutput
        results = await Job.prisma().count(
            select={
                '_all': True,
                'type': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.JobCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.JobWhereInput] = None
    ) -> int:
        """Delete multiple Job records.

        Parameters
        ----------
        where
            Optional Job filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Job records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Job records
        total = await Job.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.JobScalarFieldKeysT'],
        *,
        where: Optional['types.JobWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.JobAvgAggregateInput'] = None,
        sum: Optional['types.JobSumAggregateInput'] = None,
        min: Optional['types.JobMinAggregateInput'] = None,
        max: Optional['types.JobMaxAggregateInput'] = None,
        having: Optional['types.JobScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.JobCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.JobScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.JobScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.JobGroupByOutput']:
        """Group Job records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Job fields to group records by
        where
            Job filter to select records
        take
            Limit the maximum number of Job records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.JobGroupByOutput]
            A list of dictionaries representing the Job record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Job records by salaryRange values
        # and count how many records are in each group
        results = await Job.prisma().group_by(
            ['salaryRange'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class JobCandidateActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.JobCandidate]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await JobCandidate.prisma().query_raw(
            'SELECT * FROM JobCandidate WHERE id = $1',
            'bjafcgbffc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.JobCandidate
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await JobCandidate.prisma().query_first(
            'SELECT * FROM JobCandidate WHERE status = $1',
            'hihegjif',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.JobCandidateCreateInput,
        include: Optional[types.JobCandidateInclude] = None
    ) -> _PrismaModelT:
        """Create a new JobCandidate record.

        Parameters
        ----------
        data
            JobCandidate record data
        include
            Specifies which relations should be loaded on the returned JobCandidate model

        Returns
        -------
        prisma.models.JobCandidate
            The created JobCandidate record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a JobCandidate record from just the required fields
        jobcandidate = await JobCandidate.prisma().create(
            data={
                # data to create a JobCandidate record
                'jobId': 'bdjidcidac',
                'candidateId': 'ifgaaagff',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.JobCandidateCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple JobCandidate records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of JobCandidate record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await JobCandidate.prisma().create_many(
            data=[
                {
                    # data to create a JobCandidate record
                    'jobId': 'befcddgjce',
                    'candidateId': 'bfhdbjjgfd',
                },
                {
                    # data to create a JobCandidate record
                    'jobId': 'cabdjadaji',
                    'candidateId': 'faajgfadf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.JobCandidateWhereUniqueInput,
        include: Optional[types.JobCandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single JobCandidate record.

        Parameters
        ----------
        where
            JobCandidate filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned JobCandidate model

        Returns
        -------
        prisma.models.JobCandidate
            The deleted JobCandidate record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        jobcandidate = await JobCandidate.prisma().delete(
            where={
                'id': 'biaagcedjc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.JobCandidateWhereUniqueInput,
        include: Optional[types.JobCandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique JobCandidate record.

        Parameters
        ----------
        where
            JobCandidate filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned JobCandidate model

        Returns
        -------
        prisma.models.JobCandidate
            The found JobCandidate record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        jobcandidate = await JobCandidate.prisma().find_unique(
            where={
                'id': 'cahhaghecf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.JobCandidateWhereUniqueInput,
        include: Optional[types.JobCandidateInclude] = None
    ) -> _PrismaModelT:
        """Find a unique JobCandidate record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            JobCandidate filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned JobCandidate model

        Returns
        -------
        prisma.models.JobCandidate
            The found JobCandidate record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        jobcandidate = await JobCandidate.prisma().find_unique_or_raise(
            where={
                'id': 'bghcbbcidi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobCandidateWhereInput] = None,
        cursor: Optional[types.JobCandidateWhereUniqueInput] = None,
        include: Optional[types.JobCandidateInclude] = None,
        order: Optional[Union[types.JobCandidateOrderByInput, List[types.JobCandidateOrderByInput]]] = None,
        distinct: Optional[List[types.JobCandidateScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple JobCandidate records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of JobCandidate records returned
        skip
            Ignore the first N results
        where
            JobCandidate filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned JobCandidate model
        order
            Order the returned JobCandidate records by any field
        distinct
            Filter JobCandidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.JobCandidate]
            The list of all JobCandidate records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 JobCandidate records
        jobcandidates = await JobCandidate.prisma().find_many(take=10)

        # find the first 5 JobCandidate records ordered by the stage field
        jobcandidates = await JobCandidate.prisma().find_many(
            take=5,
            order={
                'stage': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.JobCandidateWhereInput] = None,
        cursor: Optional[types.JobCandidateWhereUniqueInput] = None,
        include: Optional[types.JobCandidateInclude] = None,
        order: Optional[Union[types.JobCandidateOrderByInput, List[types.JobCandidateOrderByInput]]] = None,
        distinct: Optional[List[types.JobCandidateScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single JobCandidate record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            JobCandidate filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned JobCandidate model
        order
            Order the returned JobCandidate records by any field
        distinct
            Filter JobCandidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.JobCandidate
            The first JobCandidate record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second JobCandidate record ordered by the notes field
        jobcandidate = await JobCandidate.prisma().find_first(
            skip=1,
            order={
                'notes': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.JobCandidateWhereInput] = None,
        cursor: Optional[types.JobCandidateWhereUniqueInput] = None,
        include: Optional[types.JobCandidateInclude] = None,
        order: Optional[Union[types.JobCandidateOrderByInput, List[types.JobCandidateOrderByInput]]] = None,
        distinct: Optional[List[types.JobCandidateScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single JobCandidate record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            JobCandidate filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned JobCandidate model
        order
            Order the returned JobCandidate records by any field
        distinct
            Filter JobCandidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.JobCandidate
            The first JobCandidate record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second JobCandidate record ordered by the jobId field
        jobcandidate = await JobCandidate.prisma().find_first_or_raise(
            skip=1,
            order={
                'jobId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.JobCandidateUpdateInput,
        where: types.JobCandidateWhereUniqueInput,
        include: Optional[types.JobCandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single JobCandidate record.

        Parameters
        ----------
        data
            JobCandidate record data specifying what to update
        where
            JobCandidate filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned JobCandidate model

        Returns
        -------
        prisma.models.JobCandidate
            The updated JobCandidate record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        jobcandidate = await JobCandidate.prisma().update(
            where={
                'id': 'jcgghhgdj',
            },
            data={
                # data to update the JobCandidate record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.JobCandidateWhereUniqueInput,
        data: types.JobCandidateUpsertInput,
        include: Optional[types.JobCandidateInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            JobCandidate filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned JobCandidate model

        Returns
        -------
        prisma.models.JobCandidate
            The created or updated JobCandidate record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        jobcandidate = await JobCandidate.prisma().upsert(
            where={
                'id': 'beehgcebbg',
            },
            data={
                'create': {
                    'id': 'beehgcebbg',
                    'jobId': 'cabdjadaji',
                    'candidateId': 'faajgfadf',
                },
                'update': {
                    'jobId': 'cabdjadaji',
                    'candidateId': 'faajgfadf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.JobCandidateUpdateManyMutationInput,
        where: types.JobCandidateWhereInput,
    ) -> int:
        """Update multiple JobCandidate records

        Parameters
        ----------
        data
            JobCandidate data to update the selected JobCandidate records to
        where
            Filter to select the JobCandidate records to update

        Returns
        -------
        int
            The total number of JobCandidate records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all JobCandidate records
        total = await JobCandidate.prisma().update_many(
            data={
                'candidateId': 'bhdiaidiaf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobCandidateWhereInput] = None,
        cursor: Optional[types.JobCandidateWhereUniqueInput] = None,
    ) -> int:
        """Count the number of JobCandidate records present in the database

        Parameters
        ----------
        select
            Select the JobCandidate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            JobCandidate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.JobCandidateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await JobCandidate.prisma().count()

        # results: prisma.types.JobCandidateCountAggregateOutput
        results = await JobCandidate.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.JobCandidateCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobCandidateWhereInput] = None,
        cursor: Optional[types.JobCandidateWhereUniqueInput] = None,
    ) -> types.JobCandidateCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.JobCandidateCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobCandidateWhereInput] = None,
        cursor: Optional[types.JobCandidateWhereUniqueInput] = None,
    ) -> Union[int, types.JobCandidateCountAggregateOutput]:
        """Count the number of JobCandidate records present in the database

        Parameters
        ----------
        select
            Select the JobCandidate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            JobCandidate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.JobCandidateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await JobCandidate.prisma().count()

        # results: prisma.types.JobCandidateCountAggregateOutput
        results = await JobCandidate.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.JobCandidateCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.JobCandidateWhereInput] = None
    ) -> int:
        """Delete multiple JobCandidate records.

        Parameters
        ----------
        where
            Optional JobCandidate filter to find the records to be deleted

        Returns
        -------
        int
            The total number of JobCandidate records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all JobCandidate records
        total = await JobCandidate.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.JobCandidateScalarFieldKeysT'],
        *,
        where: Optional['types.JobCandidateWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.JobCandidateAvgAggregateInput'] = None,
        sum: Optional['types.JobCandidateSumAggregateInput'] = None,
        min: Optional['types.JobCandidateMinAggregateInput'] = None,
        max: Optional['types.JobCandidateMaxAggregateInput'] = None,
        having: Optional['types.JobCandidateScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.JobCandidateCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.JobCandidateScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.JobCandidateScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.JobCandidateGroupByOutput']:
        """Group JobCandidate records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar JobCandidate fields to group records by
        where
            JobCandidate filter to select records
        take
            Limit the maximum number of JobCandidate records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.JobCandidateGroupByOutput]
            A list of dictionaries representing the JobCandidate record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group JobCandidate records by deleted values
        # and count how many records are in each group
        results = await JobCandidate.prisma().group_by(
            ['deleted'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ProjectActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Project]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Project.prisma().query_raw(
            'SELECT * FROM Project WHERE id = $1',
            'deajegcfi',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Project
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Project.prisma().query_first(
            'SELECT * FROM Project WHERE name = $1',
            'gabahhhjf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProjectCreateInput,
        include: Optional[types.ProjectInclude] = None
    ) -> _PrismaModelT:
        """Create a new Project record.

        Parameters
        ----------
        data
            Project record data
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The created Project record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Project record from just the required fields
        project = await Project.prisma().create(
            data={
                # data to create a Project record
                'name': 'cjagadcjg',
                'tenantId': 'bifficggej',
                'userId': 'bgbbaajbic',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProjectCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Project records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Project record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Project.prisma().create_many(
            data=[
                {
                    # data to create a Project record
                    'name': 'eegghdhjb',
                    'tenantId': 'daafgidjg',
                    'userId': 'gdcgcgagj',
                },
                {
                    # data to create a Project record
                    'name': 'bhceabbgja',
                    'tenantId': 'ehabfhegh',
                    'userId': 'bcajcajjbc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Project record.

        Parameters
        ----------
        where
            Project filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The deleted Project record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().delete(
            where={
                'id': 'bfdgheeegf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Project record.

        Parameters
        ----------
        where
            Project filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The found Project record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().find_unique(
            where={
                'id': 'ececbijji',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Project record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Project filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The found Project record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().find_unique_or_raise(
            where={
                'id': 'cbcfgdcdhf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Project records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Project records returned
        skip
            Ignore the first N results
        where
            Project filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Project]
            The list of all Project records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Project records
        projects = await Project.prisma().find_many(take=10)

        # find the first 5 Project records ordered by the description field
        projects = await Project.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Project record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Project filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Project
            The first Project record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Project record ordered by the query field
        project = await Project.prisma().find_first(
            skip=1,
            order={
                'query': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Project record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Project filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Project
            The first Project record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Project record ordered by the tenantId field
        project = await Project.prisma().find_first_or_raise(
            skip=1,
            order={
                'tenantId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProjectUpdateInput,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Project record.

        Parameters
        ----------
        data
            Project record data specifying what to update
        where
            Project filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The updated Project record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        project = await Project.prisma().update(
            where={
                'id': 'fdgjfbhia',
            },
            data={
                # data to update the Project record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProjectWhereUniqueInput,
        data: types.ProjectUpsertInput,
        include: Optional[types.ProjectInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Project filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The created or updated Project record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().upsert(
            where={
                'id': 'jcehcdchh',
            },
            data={
                'create': {
                    'id': 'jcehcdchh',
                    'name': 'bhceabbgja',
                    'tenantId': 'ehabfhegh',
                    'userId': 'bcajcajjbc',
                },
                'update': {
                    'name': 'bhceabbgja',
                    'tenantId': 'ehabfhegh',
                    'userId': 'bcajcajjbc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProjectUpdateManyMutationInput,
        where: types.ProjectWhereInput,
    ) -> int:
        """Update multiple Project records

        Parameters
        ----------
        data
            Project data to update the selected Project records to
        where
            Filter to select the Project records to update

        Returns
        -------
        int
            The total number of Project records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Project records
        total = await Project.prisma().update_many(
            data={
                'userId': 'bgcbjdhjcc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Project records present in the database

        Parameters
        ----------
        select
            Select the Project fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Project filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Project.prisma().count()

        # results: prisma.types.ProjectCountAggregateOutput
        results = await Project.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProjectCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> types.ProjectCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProjectCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> Union[int, types.ProjectCountAggregateOutput]:
        """Count the number of Project records present in the database

        Parameters
        ----------
        select
            Select the Project fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Project filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Project.prisma().count()

        # results: prisma.types.ProjectCountAggregateOutput
        results = await Project.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProjectCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProjectWhereInput] = None
    ) -> int:
        """Delete multiple Project records.

        Parameters
        ----------
        where
            Optional Project filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Project records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Project records
        total = await Project.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProjectScalarFieldKeysT'],
        *,
        where: Optional['types.ProjectWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProjectAvgAggregateInput'] = None,
        sum: Optional['types.ProjectSumAggregateInput'] = None,
        min: Optional['types.ProjectMinAggregateInput'] = None,
        max: Optional['types.ProjectMaxAggregateInput'] = None,
        having: Optional['types.ProjectScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProjectCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProjectScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.ProjectScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.ProjectGroupByOutput']:
        """Group Project records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Project fields to group records by
        where
            Project filter to select records
        take
            Limit the maximum number of Project records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProjectGroupByOutput]
            A list of dictionaries representing the Project record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Project records by deleted values
        # and count how many records are in each group
        results = await Project.prisma().group_by(
            ['deleted'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AgentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Agent]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Agent.prisma().query_raw(
            'SELECT * FROM Agent WHERE id = $1',
            'bieiidcabj',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Agent
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Agent.prisma().query_first(
            'SELECT * FROM Agent WHERE name = $1',
            'bjcbfcieaa',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AgentCreateInput,
        include: Optional[types.AgentInclude] = None
    ) -> _PrismaModelT:
        """Create a new Agent record.

        Parameters
        ----------
        data
            Agent record data
        include
            Specifies which relations should be loaded on the returned Agent model

        Returns
        -------
        prisma.models.Agent
            The created Agent record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Agent record from just the required fields
        agent = await Agent.prisma().create(
            data={
                # data to create a Agent record
                'name': 'cbaaechiej',
                'tenantId': 'iejbeaaeg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AgentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Agent records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Agent record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Agent.prisma().create_many(
            data=[
                {
                    # data to create a Agent record
                    'name': 'jcibfcbhf',
                    'tenantId': 'chdadcaga',
                },
                {
                    # data to create a Agent record
                    'name': 'jicieifbh',
                    'tenantId': 'fbahdheji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AgentWhereUniqueInput,
        include: Optional[types.AgentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Agent record.

        Parameters
        ----------
        where
            Agent filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Agent model

        Returns
        -------
        prisma.models.Agent
            The deleted Agent record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agent = await Agent.prisma().delete(
            where={
                'id': 'cbbheiicgh',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AgentWhereUniqueInput,
        include: Optional[types.AgentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Agent record.

        Parameters
        ----------
        where
            Agent filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Agent model

        Returns
        -------
        prisma.models.Agent
            The found Agent record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agent = await Agent.prisma().find_unique(
            where={
                'id': 'beabjeejdg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AgentWhereUniqueInput,
        include: Optional[types.AgentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Agent record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Agent filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Agent model

        Returns
        -------
        prisma.models.Agent
            The found Agent record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agent = await Agent.prisma().find_unique_or_raise(
            where={
                'id': 'bcjhgahffd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentWhereInput] = None,
        cursor: Optional[types.AgentWhereUniqueInput] = None,
        include: Optional[types.AgentInclude] = None,
        order: Optional[Union[types.AgentOrderByInput, List[types.AgentOrderByInput]]] = None,
        distinct: Optional[List[types.AgentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Agent records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Agent records returned
        skip
            Ignore the first N results
        where
            Agent filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Agent model
        order
            Order the returned Agent records by any field
        distinct
            Filter Agent records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Agent]
            The list of all Agent records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Agent records
        agents = await Agent.prisma().find_many(take=10)

        # find the first 5 Agent records ordered by the description field
        agents = await Agent.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AgentWhereInput] = None,
        cursor: Optional[types.AgentWhereUniqueInput] = None,
        include: Optional[types.AgentInclude] = None,
        order: Optional[Union[types.AgentOrderByInput, List[types.AgentOrderByInput]]] = None,
        distinct: Optional[List[types.AgentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Agent record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Agent filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Agent model
        order
            Order the returned Agent records by any field
        distinct
            Filter Agent records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Agent
            The first Agent record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Agent record ordered by the type field
        agent = await Agent.prisma().find_first(
            skip=1,
            order={
                'type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AgentWhereInput] = None,
        cursor: Optional[types.AgentWhereUniqueInput] = None,
        include: Optional[types.AgentInclude] = None,
        order: Optional[Union[types.AgentOrderByInput, List[types.AgentOrderByInput]]] = None,
        distinct: Optional[List[types.AgentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Agent record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Agent filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Agent model
        order
            Order the returned Agent records by any field
        distinct
            Filter Agent records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Agent
            The first Agent record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Agent record ordered by the prompt field
        agent = await Agent.prisma().find_first_or_raise(
            skip=1,
            order={
                'prompt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AgentUpdateInput,
        where: types.AgentWhereUniqueInput,
        include: Optional[types.AgentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Agent record.

        Parameters
        ----------
        data
            Agent record data specifying what to update
        where
            Agent filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Agent model

        Returns
        -------
        prisma.models.Agent
            The updated Agent record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        agent = await Agent.prisma().update(
            where={
                'id': 'fbjeiiffa',
            },
            data={
                # data to update the Agent record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AgentWhereUniqueInput,
        data: types.AgentUpsertInput,
        include: Optional[types.AgentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Agent filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Agent model

        Returns
        -------
        prisma.models.Agent
            The created or updated Agent record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agent = await Agent.prisma().upsert(
            where={
                'id': 'jhgidcgbf',
            },
            data={
                'create': {
                    'id': 'jhgidcgbf',
                    'name': 'jicieifbh',
                    'tenantId': 'fbahdheji',
                },
                'update': {
                    'name': 'jicieifbh',
                    'tenantId': 'fbahdheji',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AgentUpdateManyMutationInput,
        where: types.AgentWhereInput,
    ) -> int:
        """Update multiple Agent records

        Parameters
        ----------
        data
            Agent data to update the selected Agent records to
        where
            Filter to select the Agent records to update

        Returns
        -------
        int
            The total number of Agent records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Agent records
        total = await Agent.prisma().update_many(
            data={
                'temperature': 1696425492.16926
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentWhereInput] = None,
        cursor: Optional[types.AgentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Agent records present in the database

        Parameters
        ----------
        select
            Select the Agent fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Agent filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AgentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Agent.prisma().count()

        # results: prisma.types.AgentCountAggregateOutput
        results = await Agent.prisma().count(
            select={
                '_all': True,
                'maxTokens': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AgentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentWhereInput] = None,
        cursor: Optional[types.AgentWhereUniqueInput] = None,
    ) -> types.AgentCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AgentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentWhereInput] = None,
        cursor: Optional[types.AgentWhereUniqueInput] = None,
    ) -> Union[int, types.AgentCountAggregateOutput]:
        """Count the number of Agent records present in the database

        Parameters
        ----------
        select
            Select the Agent fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Agent filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AgentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Agent.prisma().count()

        # results: prisma.types.AgentCountAggregateOutput
        results = await Agent.prisma().count(
            select={
                '_all': True,
                'topP': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AgentCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AgentWhereInput] = None
    ) -> int:
        """Delete multiple Agent records.

        Parameters
        ----------
        where
            Optional Agent filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Agent records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Agent records
        total = await Agent.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AgentScalarFieldKeysT'],
        *,
        where: Optional['types.AgentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AgentAvgAggregateInput'] = None,
        sum: Optional['types.AgentSumAggregateInput'] = None,
        min: Optional['types.AgentMinAggregateInput'] = None,
        max: Optional['types.AgentMaxAggregateInput'] = None,
        having: Optional['types.AgentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AgentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AgentScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.AgentScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.AgentGroupByOutput']:
        """Group Agent records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Agent fields to group records by
        where
            Agent filter to select records
        take
            Limit the maximum number of Agent records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AgentGroupByOutput]
            A list of dictionaries representing the Agent record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Agent records by frequencyPenalty values
        # and count how many records are in each group
        results = await Agent.prisma().group_by(
            ['frequencyPenalty'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ConversationActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Conversation]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Conversation.prisma().query_raw(
            'SELECT * FROM Conversation WHERE id = $1',
            'bacdaibgfa',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Conversation
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Conversation.prisma().query_first(
            'SELECT * FROM Conversation WHERE agentId = $1',
            'dchgibach',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ConversationCreateInput,
        include: Optional[types.ConversationInclude] = None
    ) -> _PrismaModelT:
        """Create a new Conversation record.

        Parameters
        ----------
        data
            Conversation record data
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The created Conversation record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Conversation record from just the required fields
        conversation = await Conversation.prisma().create(
            data={
                # data to create a Conversation record
                'agentId': 'fchheijjc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ConversationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Conversation records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Conversation record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Conversation.prisma().create_many(
            data=[
                {
                    # data to create a Conversation record
                    'agentId': 'cacjdfhejh',
                },
                {
                    # data to create a Conversation record
                    'agentId': 'bdbifjhbbi',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Conversation record.

        Parameters
        ----------
        where
            Conversation filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The deleted Conversation record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().delete(
            where={
                'id': 'cbccbbcdfb',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Conversation record.

        Parameters
        ----------
        where
            Conversation filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The found Conversation record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().find_unique(
            where={
                'id': 'bacejedaca',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Conversation record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Conversation filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The found Conversation record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().find_unique_or_raise(
            where={
                'id': 'bhbhdahfaj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
        include: Optional[types.ConversationInclude] = None,
        order: Optional[Union[types.ConversationOrderByInput, List[types.ConversationOrderByInput]]] = None,
        distinct: Optional[List[types.ConversationScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Conversation records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Conversation records returned
        skip
            Ignore the first N results
        where
            Conversation filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Conversation model
        order
            Order the returned Conversation records by any field
        distinct
            Filter Conversation records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Conversation]
            The list of all Conversation records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Conversation records
        conversations = await Conversation.prisma().find_many(take=10)

        # find the first 5 Conversation records ordered by the createdAt field
        conversations = await Conversation.prisma().find_many(
            take=5,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
        include: Optional[types.ConversationInclude] = None,
        order: Optional[Union[types.ConversationOrderByInput, List[types.ConversationOrderByInput]]] = None,
        distinct: Optional[List[types.ConversationScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Conversation record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Conversation filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Conversation model
        order
            Order the returned Conversation records by any field
        distinct
            Filter Conversation records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Conversation
            The first Conversation record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Conversation record ordered by the updatedAt field
        conversation = await Conversation.prisma().find_first(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
        include: Optional[types.ConversationInclude] = None,
        order: Optional[Union[types.ConversationOrderByInput, List[types.ConversationOrderByInput]]] = None,
        distinct: Optional[List[types.ConversationScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Conversation record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Conversation filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Conversation model
        order
            Order the returned Conversation records by any field
        distinct
            Filter Conversation records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Conversation
            The first Conversation record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Conversation record ordered by the deleted field
        conversation = await Conversation.prisma().find_first_or_raise(
            skip=1,
            order={
                'deleted': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ConversationUpdateInput,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Conversation record.

        Parameters
        ----------
        data
            Conversation record data specifying what to update
        where
            Conversation filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The updated Conversation record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        conversation = await Conversation.prisma().update(
            where={
                'id': 'bfjibceaec',
            },
            data={
                # data to update the Conversation record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ConversationWhereUniqueInput,
        data: types.ConversationUpsertInput,
        include: Optional[types.ConversationInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Conversation filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The created or updated Conversation record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().upsert(
            where={
                'id': 'ibhgcdbgd',
            },
            data={
                'create': {
                    'id': 'ibhgcdbgd',
                    'agentId': 'bdbifjhbbi',
                },
                'update': {
                    'agentId': 'bdbifjhbbi',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ConversationUpdateManyMutationInput,
        where: types.ConversationWhereInput,
    ) -> int:
        """Update multiple Conversation records

        Parameters
        ----------
        data
            Conversation data to update the selected Conversation records to
        where
            Filter to select the Conversation records to update

        Returns
        -------
        int
            The total number of Conversation records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Conversation records
        total = await Conversation.prisma().update_many(
            data={
                'deletedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Conversation records present in the database

        Parameters
        ----------
        select
            Select the Conversation fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Conversation filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ConversationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Conversation.prisma().count()

        # results: prisma.types.ConversationCountAggregateOutput
        results = await Conversation.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ConversationCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
    ) -> types.ConversationCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ConversationCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
    ) -> Union[int, types.ConversationCountAggregateOutput]:
        """Count the number of Conversation records present in the database

        Parameters
        ----------
        select
            Select the Conversation fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Conversation filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ConversationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Conversation.prisma().count()

        # results: prisma.types.ConversationCountAggregateOutput
        results = await Conversation.prisma().count(
            select={
                '_all': True,
                'agentId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ConversationCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ConversationWhereInput] = None
    ) -> int:
        """Delete multiple Conversation records.

        Parameters
        ----------
        where
            Optional Conversation filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Conversation records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Conversation records
        total = await Conversation.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ConversationScalarFieldKeysT'],
        *,
        where: Optional['types.ConversationWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ConversationAvgAggregateInput'] = None,
        sum: Optional['types.ConversationSumAggregateInput'] = None,
        min: Optional['types.ConversationMinAggregateInput'] = None,
        max: Optional['types.ConversationMaxAggregateInput'] = None,
        having: Optional['types.ConversationScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ConversationCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ConversationScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.ConversationScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.ConversationGroupByOutput']:
        """Group Conversation records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Conversation fields to group records by
        where
            Conversation filter to select records
        take
            Limit the maximum number of Conversation records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ConversationGroupByOutput]
            A list of dictionaries representing the Conversation record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Conversation records by createdAt values
        # and count how many records are in each group
        results = await Conversation.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AgentTaskActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.AgentTask]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await AgentTask.prisma().query_raw(
            'SELECT * FROM AgentTask WHERE id = $1',
            'badaffhddg',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.AgentTask
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await AgentTask.prisma().query_first(
            'SELECT * FROM AgentTask WHERE agentId = $1',
            'bbdbfcfihd',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AgentTaskCreateInput,
        include: Optional[types.AgentTaskInclude] = None
    ) -> _PrismaModelT:
        """Create a new AgentTask record.

        Parameters
        ----------
        data
            AgentTask record data
        include
            Specifies which relations should be loaded on the returned AgentTask model

        Returns
        -------
        prisma.models.AgentTask
            The created AgentTask record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a AgentTask record from just the required fields
        agenttask = await AgentTask.prisma().create(
            data={
                # data to create a AgentTask record
                'agentId': 'cbagggbji',
                'name': 'bchgafhjed',
                'conversationId': 'heffgjdei',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AgentTaskCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple AgentTask records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of AgentTask record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await AgentTask.prisma().create_many(
            data=[
                {
                    # data to create a AgentTask record
                    'agentId': 'dahihgbeb',
                    'name': 'bgheaejbcc',
                    'conversationId': 'bfcgifeged',
                },
                {
                    # data to create a AgentTask record
                    'agentId': 'jfiahhbae',
                    'name': 'bfbdafajcb',
                    'conversationId': 'caeghehde',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AgentTaskWhereUniqueInput,
        include: Optional[types.AgentTaskInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single AgentTask record.

        Parameters
        ----------
        where
            AgentTask filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned AgentTask model

        Returns
        -------
        prisma.models.AgentTask
            The deleted AgentTask record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agenttask = await AgentTask.prisma().delete(
            where={
                'id': 'caghgfbggd',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AgentTaskWhereUniqueInput,
        include: Optional[types.AgentTaskInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique AgentTask record.

        Parameters
        ----------
        where
            AgentTask filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned AgentTask model

        Returns
        -------
        prisma.models.AgentTask
            The found AgentTask record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agenttask = await AgentTask.prisma().find_unique(
            where={
                'id': 'bbidjbbjaa',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AgentTaskWhereUniqueInput,
        include: Optional[types.AgentTaskInclude] = None
    ) -> _PrismaModelT:
        """Find a unique AgentTask record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            AgentTask filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned AgentTask model

        Returns
        -------
        prisma.models.AgentTask
            The found AgentTask record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agenttask = await AgentTask.prisma().find_unique_or_raise(
            where={
                'id': 'bfijhaejdd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentTaskWhereInput] = None,
        cursor: Optional[types.AgentTaskWhereUniqueInput] = None,
        include: Optional[types.AgentTaskInclude] = None,
        order: Optional[Union[types.AgentTaskOrderByInput, List[types.AgentTaskOrderByInput]]] = None,
        distinct: Optional[List[types.AgentTaskScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple AgentTask records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of AgentTask records returned
        skip
            Ignore the first N results
        where
            AgentTask filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AgentTask model
        order
            Order the returned AgentTask records by any field
        distinct
            Filter AgentTask records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.AgentTask]
            The list of all AgentTask records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 AgentTask records
        agenttasks = await AgentTask.prisma().find_many(take=10)

        # find the first 5 AgentTask records ordered by the name field
        agenttasks = await AgentTask.prisma().find_many(
            take=5,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AgentTaskWhereInput] = None,
        cursor: Optional[types.AgentTaskWhereUniqueInput] = None,
        include: Optional[types.AgentTaskInclude] = None,
        order: Optional[Union[types.AgentTaskOrderByInput, List[types.AgentTaskOrderByInput]]] = None,
        distinct: Optional[List[types.AgentTaskScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single AgentTask record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            AgentTask filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AgentTask model
        order
            Order the returned AgentTask records by any field
        distinct
            Filter AgentTask records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.AgentTask
            The first AgentTask record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second AgentTask record ordered by the description field
        agenttask = await AgentTask.prisma().find_first(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AgentTaskWhereInput] = None,
        cursor: Optional[types.AgentTaskWhereUniqueInput] = None,
        include: Optional[types.AgentTaskInclude] = None,
        order: Optional[Union[types.AgentTaskOrderByInput, List[types.AgentTaskOrderByInput]]] = None,
        distinct: Optional[List[types.AgentTaskScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single AgentTask record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            AgentTask filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AgentTask model
        order
            Order the returned AgentTask records by any field
        distinct
            Filter AgentTask records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.AgentTask
            The first AgentTask record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second AgentTask record ordered by the conversationId field
        agenttask = await AgentTask.prisma().find_first_or_raise(
            skip=1,
            order={
                'conversationId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AgentTaskUpdateInput,
        where: types.AgentTaskWhereUniqueInput,
        include: Optional[types.AgentTaskInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single AgentTask record.

        Parameters
        ----------
        data
            AgentTask record data specifying what to update
        where
            AgentTask filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned AgentTask model

        Returns
        -------
        prisma.models.AgentTask
            The updated AgentTask record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        agenttask = await AgentTask.prisma().update(
            where={
                'id': 'bcedehfiji',
            },
            data={
                # data to update the AgentTask record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AgentTaskWhereUniqueInput,
        data: types.AgentTaskUpsertInput,
        include: Optional[types.AgentTaskInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            AgentTask filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned AgentTask model

        Returns
        -------
        prisma.models.AgentTask
            The created or updated AgentTask record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        agenttask = await AgentTask.prisma().upsert(
            where={
                'id': 'bdgjicijhb',
            },
            data={
                'create': {
                    'id': 'bdgjicijhb',
                    'agentId': 'jfiahhbae',
                    'name': 'bfbdafajcb',
                    'conversationId': 'caeghehde',
                },
                'update': {
                    'agentId': 'jfiahhbae',
                    'name': 'bfbdafajcb',
                    'conversationId': 'caeghehde',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AgentTaskUpdateManyMutationInput,
        where: types.AgentTaskWhereInput,
    ) -> int:
        """Update multiple AgentTask records

        Parameters
        ----------
        data
            AgentTask data to update the selected AgentTask records to
        where
            Filter to select the AgentTask records to update

        Returns
        -------
        int
            The total number of AgentTask records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all AgentTask records
        total = await AgentTask.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentTaskWhereInput] = None,
        cursor: Optional[types.AgentTaskWhereUniqueInput] = None,
    ) -> int:
        """Count the number of AgentTask records present in the database

        Parameters
        ----------
        select
            Select the AgentTask fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            AgentTask filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AgentTaskCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await AgentTask.prisma().count()

        # results: prisma.types.AgentTaskCountAggregateOutput
        results = await AgentTask.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AgentTaskCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentTaskWhereInput] = None,
        cursor: Optional[types.AgentTaskWhereUniqueInput] = None,
    ) -> types.AgentTaskCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AgentTaskCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AgentTaskWhereInput] = None,
        cursor: Optional[types.AgentTaskWhereUniqueInput] = None,
    ) -> Union[int, types.AgentTaskCountAggregateOutput]:
        """Count the number of AgentTask records present in the database

        Parameters
        ----------
        select
            Select the AgentTask fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            AgentTask filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AgentTaskCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await AgentTask.prisma().count()

        # results: prisma.types.AgentTaskCountAggregateOutput
        results = await AgentTask.prisma().count(
            select={
                '_all': True,
                'deleted': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AgentTaskCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AgentTaskWhereInput] = None
    ) -> int:
        """Delete multiple AgentTask records.

        Parameters
        ----------
        where
            Optional AgentTask filter to find the records to be deleted

        Returns
        -------
        int
            The total number of AgentTask records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all AgentTask records
        total = await AgentTask.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AgentTaskScalarFieldKeysT'],
        *,
        where: Optional['types.AgentTaskWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AgentTaskAvgAggregateInput'] = None,
        sum: Optional['types.AgentTaskSumAggregateInput'] = None,
        min: Optional['types.AgentTaskMinAggregateInput'] = None,
        max: Optional['types.AgentTaskMaxAggregateInput'] = None,
        having: Optional['types.AgentTaskScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AgentTaskCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AgentTaskScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.AgentTaskScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.AgentTaskGroupByOutput']:
        """Group AgentTask records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar AgentTask fields to group records by
        where
            AgentTask filter to select records
        take
            Limit the maximum number of AgentTask records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AgentTaskGroupByOutput]
            A list of dictionaries representing the AgentTask record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group AgentTask records by deletedAt values
        # and count how many records are in each group
        results = await AgentTask.prisma().group_by(
            ['deletedAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models