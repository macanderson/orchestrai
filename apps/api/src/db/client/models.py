# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from ._builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class License(bases.BaseLicense):
    """Represents a License record"""

    id: _str
    type: 'enums.LicenseType'
    tenants: Optional[List['models.Tenant']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.LicenseKeys']] = None,
        exclude: Optional[Iterable['types.LicenseKeys']] = None,
        required: Optional[Iterable['types.LicenseKeys']] = None,
        optional: Optional[Iterable['types.LicenseKeys']] = None,
        relations: Optional[Mapping['types.LicenseRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.LicenseKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _License_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _License_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _License_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _License_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _License_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _License_relational_fields:
                        raise errors.UnknownRelationalFieldError('License', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid License / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'License',
            }
        )
        _created_partial_types.add(name)


class Tenant(bases.BaseTenant):
    """Represents a Tenant record"""

    id: _str
    name: _str
    slug: _str
    billingEmail: Optional[_str] = None
    billingPhone: Optional[_str] = None
    billingAddress: Optional[_str] = None
    billingAddress2: Optional[_str] = None
    billingCity: Optional[_str] = None
    billingState: Optional[_str] = None
    billingZip: Optional[_str] = None
    billingCountry: Optional[_str] = None
    billingVatNumber: Optional[_str] = None
    users: Optional[List['models.User']] = None
    projects: Optional[List['models.Project']] = None
    jobs: Optional[List['models.Job']] = None
    agents: Optional[List['models.Agent']] = None
    candidates: Optional[List['models.Candidate']] = None
    licenseId: Optional[_str] = None
    license: Optional['models.License'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.TenantKeys']] = None,
        exclude: Optional[Iterable['types.TenantKeys']] = None,
        required: Optional[Iterable['types.TenantKeys']] = None,
        optional: Optional[Iterable['types.TenantKeys']] = None,
        relations: Optional[Mapping['types.TenantRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.TenantKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Tenant_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Tenant_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Tenant_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Tenant_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Tenant_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Tenant_relational_fields:
                        raise errors.UnknownRelationalFieldError('Tenant', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Tenant / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Tenant',
            }
        )
        _created_partial_types.add(name)


class UserRole(bases.BaseUserRole):
    """Represents a UserRole record"""

    id: _str
    name: _str
    type: 'enums.UserRoleType'
    permissions: 'fields.Json'
    users: Optional[List['models.User']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserRoleKeys']] = None,
        exclude: Optional[Iterable['types.UserRoleKeys']] = None,
        required: Optional[Iterable['types.UserRoleKeys']] = None,
        optional: Optional[Iterable['types.UserRoleKeys']] = None,
        relations: Optional[Mapping['types.UserRoleRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserRoleKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _UserRole_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _UserRole_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _UserRole_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _UserRole_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _UserRole_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _UserRole_relational_fields:
                        raise errors.UnknownRelationalFieldError('UserRole', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid UserRole / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'UserRole',
            }
        )
        _created_partial_types.add(name)


class User(bases.BaseUser):
    """Represents a User record"""

    id: _str
    email: _str
    emailVerified: Optional[datetime.datetime] = None
    firstName: Optional[_str] = None
    lastName: Optional[_str] = None
    imageUrl: Optional[_str] = None
    passwordHash: Optional[_str] = None
    roleId: Optional[_str] = None
    role: Optional['models.UserRole'] = None
    tenantId: Optional[_str] = None
    tenant: Optional['models.Tenant'] = None
    projects: Optional[List['models.Project']] = None
    sessions: Optional[List['models.UserSession']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserKeys']] = None,
        exclude: Optional[Iterable['types.UserKeys']] = None,
        required: Optional[Iterable['types.UserKeys']] = None,
        optional: Optional[Iterable['types.UserKeys']] = None,
        relations: Optional[Mapping['types.UserRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _User_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _User_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _User_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _User_relational_fields:
                        raise errors.UnknownRelationalFieldError('User', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid User / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'User',
            }
        )
        _created_partial_types.add(name)


class UserSession(bases.BaseUserSession):
    """Represents a UserSession record"""

    id: _str
    userId: _str
    user: Optional['models.User'] = None
    token: _str
    expiresAt: datetime.datetime
    ipAddress: Optional[_str] = None
    userAgent: Optional[_str] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserSessionKeys']] = None,
        exclude: Optional[Iterable['types.UserSessionKeys']] = None,
        required: Optional[Iterable['types.UserSessionKeys']] = None,
        optional: Optional[Iterable['types.UserSessionKeys']] = None,
        relations: Optional[Mapping['types.UserSessionRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserSessionKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _UserSession_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _UserSession_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _UserSession_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _UserSession_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _UserSession_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _UserSession_relational_fields:
                        raise errors.UnknownRelationalFieldError('UserSession', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid UserSession / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'UserSession',
            }
        )
        _created_partial_types.add(name)


class Candidate(bases.BaseCandidate):
    """Represents a Candidate record"""

    id: _str
    firstName: _str
    lastName: _str
    email: _str
    phone: Optional[_str] = None
    resumeUrl: Optional[_str] = None
    linkedinUrl: Optional[_str] = None
    currentTitle: Optional[_str] = None
    currentCompany: Optional[_str] = None
    careerLevel: 'enums.CareerLevel'
    yearsOfExperience: Optional[_int] = None
    educationLevel: 'enums.EducationLevel'
    skills: List[_str]
    languages: List[_str]
    location: Optional[_str] = None
    currentSalary: Optional[_float] = None
    expectedSalary: Optional[_float] = None
    currency: Optional[_str] = None
    noticePeriod: Optional[_int] = None
    noticePeriodUnit: Optional[_str] = None
    visaStatus: Optional[_str] = None
    immigrationStatus: Optional[_str] = None
    immigrationCountry: Optional[_str] = None
    status: 'enums.CandidateStatus'
    source: 'enums.CandidateSource'
    notes: Optional[_str] = None
    jobCandidates: Optional[List['models.JobCandidate']] = None
    tenantId: Optional[_str] = None
    tenant: Optional['models.Tenant'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None


    @field_validator('skills', 'languages', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CandidateKeys']] = None,
        exclude: Optional[Iterable['types.CandidateKeys']] = None,
        required: Optional[Iterable['types.CandidateKeys']] = None,
        optional: Optional[Iterable['types.CandidateKeys']] = None,
        relations: Optional[Mapping['types.CandidateRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CandidateKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Candidate_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Candidate_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Candidate_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Candidate_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Candidate_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Candidate_relational_fields:
                        raise errors.UnknownRelationalFieldError('Candidate', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Candidate / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Candidate',
            }
        )
        _created_partial_types.add(name)


class Job(bases.BaseJob):
    """Represents a Job record"""

    id: _str
    title: _str
    status: 'enums.JobStatus'
    description: Optional[_str] = None
    requirements: List[_str]
    keywords: List[_str]
    location: Optional[_str] = None
    type: Optional[_str] = None
    salaryRange: Optional[_str] = None
    department: Optional[_str] = None
    tenantId: _str
    tenant: Optional['models.Tenant'] = None
    jobCandidates: Optional[List['models.JobCandidate']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None


    @field_validator('requirements', 'keywords', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.JobKeys']] = None,
        exclude: Optional[Iterable['types.JobKeys']] = None,
        required: Optional[Iterable['types.JobKeys']] = None,
        optional: Optional[Iterable['types.JobKeys']] = None,
        relations: Optional[Mapping['types.JobRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.JobKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Job_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Job_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Job_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Job_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Job_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Job_relational_fields:
                        raise errors.UnknownRelationalFieldError('Job', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Job / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Job',
            }
        )
        _created_partial_types.add(name)


class JobCandidate(bases.BaseJobCandidate):
    """Represents a JobCandidate record"""

    id: _str
    status: _str
    stage: Optional[_str] = None
    notes: Optional[_str] = None
    jobId: _str
    job: Optional['models.Job'] = None
    candidateId: _str
    candidate: Optional['models.Candidate'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.JobCandidateKeys']] = None,
        exclude: Optional[Iterable['types.JobCandidateKeys']] = None,
        required: Optional[Iterable['types.JobCandidateKeys']] = None,
        optional: Optional[Iterable['types.JobCandidateKeys']] = None,
        relations: Optional[Mapping['types.JobCandidateRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.JobCandidateKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _JobCandidate_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _JobCandidate_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _JobCandidate_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _JobCandidate_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _JobCandidate_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _JobCandidate_relational_fields:
                        raise errors.UnknownRelationalFieldError('JobCandidate', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid JobCandidate / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'JobCandidate',
            }
        )
        _created_partial_types.add(name)


class Project(bases.BaseProject):
    """Represents a Project record"""

    id: _str
    name: _str
    description: Optional[_str] = None
    query: Optional[_str] = None
    tenantId: _str
    tenant: Optional['models.Tenant'] = None
    userId: _str
    user: Optional['models.User'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ProjectKeys']] = None,
        exclude: Optional[Iterable['types.ProjectKeys']] = None,
        required: Optional[Iterable['types.ProjectKeys']] = None,
        optional: Optional[Iterable['types.ProjectKeys']] = None,
        relations: Optional[Mapping['types.ProjectRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ProjectKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Project_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Project_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Project_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Project_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Project_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Project_relational_fields:
                        raise errors.UnknownRelationalFieldError('Project', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Project / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Project',
            }
        )
        _created_partial_types.add(name)


class Agent(bases.BaseAgent):
    """Represents a Agent record"""

    id: _str
    name: _str
    description: Optional[_str] = None
    type: 'enums.AgentType'
    prompt: Optional[_str] = None
    temperature: Optional[_float] = None
    maxTokens: Optional[_int] = None
    topP: Optional[_float] = None
    frequencyPenalty: Optional[_float] = None
    presencePenalty: Optional[_float] = None
    stopSequence: List[_str]
    stopSequenceTokens: List[_str]
    config: Optional['fields.Json'] = None
    tenantId: _str
    tenant: Optional['models.Tenant'] = None
    conversations: Optional[List['models.Conversation']] = None
    agentTasks: Optional[List['models.AgentTask']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None


    @field_validator('stopSequence', 'stopSequenceTokens', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.AgentKeys']] = None,
        exclude: Optional[Iterable['types.AgentKeys']] = None,
        required: Optional[Iterable['types.AgentKeys']] = None,
        optional: Optional[Iterable['types.AgentKeys']] = None,
        relations: Optional[Mapping['types.AgentRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.AgentKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Agent_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Agent_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Agent_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Agent_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Agent_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Agent_relational_fields:
                        raise errors.UnknownRelationalFieldError('Agent', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Agent / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Agent',
            }
        )
        _created_partial_types.add(name)


class Conversation(bases.BaseConversation):
    """Represents a Conversation record"""

    id: _str
    agentId: _str
    agent: Optional['models.Agent'] = None
    agentTasks: Optional[List['models.AgentTask']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ConversationKeys']] = None,
        exclude: Optional[Iterable['types.ConversationKeys']] = None,
        required: Optional[Iterable['types.ConversationKeys']] = None,
        optional: Optional[Iterable['types.ConversationKeys']] = None,
        relations: Optional[Mapping['types.ConversationRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ConversationKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Conversation_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Conversation_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Conversation_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Conversation_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Conversation_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Conversation_relational_fields:
                        raise errors.UnknownRelationalFieldError('Conversation', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Conversation / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Conversation',
            }
        )
        _created_partial_types.add(name)


class AgentTask(bases.BaseAgentTask):
    """Represents a AgentTask record"""

    id: _str
    agentId: _str
    agent: Optional['models.Agent'] = None
    name: _str
    description: Optional[_str] = None
    conversationId: _str
    conversation: Optional['models.Conversation'] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deleted: _bool
    deletedAt: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.AgentTaskKeys']] = None,
        exclude: Optional[Iterable['types.AgentTaskKeys']] = None,
        required: Optional[Iterable['types.AgentTaskKeys']] = None,
        optional: Optional[Iterable['types.AgentTaskKeys']] = None,
        relations: Optional[Mapping['types.AgentTaskRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.AgentTaskKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _AgentTask_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _AgentTask_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _AgentTask_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _AgentTask_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _AgentTask_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _AgentTask_relational_fields:
                        raise errors.UnknownRelationalFieldError('AgentTask', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid AgentTask / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'AgentTask',
            }
        )
        _created_partial_types.add(name)



_License_relational_fields: Set[str] = {
        'tenants',
    }
_License_fields: Dict['types.LicenseKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('type', {
            'name': 'type',
            'is_list': False,
            'optional': False,
            'type': 'enums.LicenseType',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenants', {
            'name': 'tenants',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Tenant\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Tenant_relational_fields: Set[str] = {
        'users',
        'projects',
        'jobs',
        'agents',
        'candidates',
        'license',
    }
_Tenant_fields: Dict['types.TenantKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('slug', {
            'name': 'slug',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingEmail', {
            'name': 'billingEmail',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingPhone', {
            'name': 'billingPhone',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingAddress', {
            'name': 'billingAddress',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingAddress2', {
            'name': 'billingAddress2',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingCity', {
            'name': 'billingCity',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingState', {
            'name': 'billingState',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingZip', {
            'name': 'billingZip',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingCountry', {
            'name': 'billingCountry',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('billingVatNumber', {
            'name': 'billingVatNumber',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('users', {
            'name': 'users',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.User\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('projects', {
            'name': 'projects',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Project\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('jobs', {
            'name': 'jobs',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Job\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('agents', {
            'name': 'agents',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Agent\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('candidates', {
            'name': 'candidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Candidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('licenseId', {
            'name': 'licenseId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('license', {
            'name': 'license',
            'is_list': False,
            'optional': True,
            'type': 'models.License',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_UserRole_relational_fields: Set[str] = {
        'users',
    }
_UserRole_fields: Dict['types.UserRoleKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('type', {
            'name': 'type',
            'is_list': False,
            'optional': False,
            'type': 'enums.UserRoleType',
            'is_relational': False,
            'documentation': None,
        }),
        ('permissions', {
            'name': 'permissions',
            'is_list': False,
            'optional': False,
            'type': 'fields.Json',
            'is_relational': False,
            'documentation': None,
        }),
        ('users', {
            'name': 'users',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.User\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_User_relational_fields: Set[str] = {
        'role',
        'tenant',
        'projects',
        'sessions',
    }
_User_fields: Dict['types.UserKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('emailVerified', {
            'name': 'emailVerified',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('firstName', {
            'name': 'firstName',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastName', {
            'name': 'lastName',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('imageUrl', {
            'name': 'imageUrl',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('passwordHash', {
            'name': 'passwordHash',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('roleId', {
            'name': 'roleId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('role', {
            'name': 'role',
            'is_list': False,
            'optional': True,
            'type': 'models.UserRole',
            'is_relational': True,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('projects', {
            'name': 'projects',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Project\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('sessions', {
            'name': 'sessions',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.UserSession\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_UserSession_relational_fields: Set[str] = {
        'user',
    }
_UserSession_fields: Dict['types.UserSessionKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('token', {
            'name': 'token',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('expiresAt', {
            'name': 'expiresAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('ipAddress', {
            'name': 'ipAddress',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userAgent', {
            'name': 'userAgent',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Candidate_relational_fields: Set[str] = {
        'jobCandidates',
        'tenant',
    }
_Candidate_fields: Dict['types.CandidateKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('firstName', {
            'name': 'firstName',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastName', {
            'name': 'lastName',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('phone', {
            'name': 'phone',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('resumeUrl', {
            'name': 'resumeUrl',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('linkedinUrl', {
            'name': 'linkedinUrl',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('currentTitle', {
            'name': 'currentTitle',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('currentCompany', {
            'name': 'currentCompany',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('careerLevel', {
            'name': 'careerLevel',
            'is_list': False,
            'optional': False,
            'type': 'enums.CareerLevel',
            'is_relational': False,
            'documentation': None,
        }),
        ('yearsOfExperience', {
            'name': 'yearsOfExperience',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('educationLevel', {
            'name': 'educationLevel',
            'is_list': False,
            'optional': False,
            'type': 'enums.EducationLevel',
            'is_relational': False,
            'documentation': None,
        }),
        ('skills', {
            'name': 'skills',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('languages', {
            'name': 'languages',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('location', {
            'name': 'location',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('currentSalary', {
            'name': 'currentSalary',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('expectedSalary', {
            'name': 'expectedSalary',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('currency', {
            'name': 'currency',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('noticePeriod', {
            'name': 'noticePeriod',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('noticePeriodUnit', {
            'name': 'noticePeriodUnit',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('visaStatus', {
            'name': 'visaStatus',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('immigrationStatus', {
            'name': 'immigrationStatus',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('immigrationCountry', {
            'name': 'immigrationCountry',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('status', {
            'name': 'status',
            'is_list': False,
            'optional': False,
            'type': 'enums.CandidateStatus',
            'is_relational': False,
            'documentation': None,
        }),
        ('source', {
            'name': 'source',
            'is_list': False,
            'optional': False,
            'type': 'enums.CandidateSource',
            'is_relational': False,
            'documentation': None,
        }),
        ('notes', {
            'name': 'notes',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('jobCandidates', {
            'name': 'jobCandidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.JobCandidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Job_relational_fields: Set[str] = {
        'tenant',
        'jobCandidates',
    }
_Job_fields: Dict['types.JobKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('title', {
            'name': 'title',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('status', {
            'name': 'status',
            'is_list': False,
            'optional': False,
            'type': 'enums.JobStatus',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('requirements', {
            'name': 'requirements',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('keywords', {
            'name': 'keywords',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('location', {
            'name': 'location',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('type', {
            'name': 'type',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('salaryRange', {
            'name': 'salaryRange',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('department', {
            'name': 'department',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('jobCandidates', {
            'name': 'jobCandidates',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.JobCandidate\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_JobCandidate_relational_fields: Set[str] = {
        'job',
        'candidate',
    }
_JobCandidate_fields: Dict['types.JobCandidateKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('status', {
            'name': 'status',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('stage', {
            'name': 'stage',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('notes', {
            'name': 'notes',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('jobId', {
            'name': 'jobId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('job', {
            'name': 'job',
            'is_list': False,
            'optional': True,
            'type': 'models.Job',
            'is_relational': True,
            'documentation': None,
        }),
        ('candidateId', {
            'name': 'candidateId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('candidate', {
            'name': 'candidate',
            'is_list': False,
            'optional': True,
            'type': 'models.Candidate',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Project_relational_fields: Set[str] = {
        'tenant',
        'user',
    }
_Project_fields: Dict['types.ProjectKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('query', {
            'name': 'query',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Agent_relational_fields: Set[str] = {
        'tenant',
        'conversations',
        'agentTasks',
    }
_Agent_fields: Dict['types.AgentKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('type', {
            'name': 'type',
            'is_list': False,
            'optional': False,
            'type': 'enums.AgentType',
            'is_relational': False,
            'documentation': None,
        }),
        ('prompt', {
            'name': 'prompt',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('temperature', {
            'name': 'temperature',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('maxTokens', {
            'name': 'maxTokens',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('topP', {
            'name': 'topP',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('frequencyPenalty', {
            'name': 'frequencyPenalty',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('presencePenalty', {
            'name': 'presencePenalty',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('stopSequence', {
            'name': 'stopSequence',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('stopSequenceTokens', {
            'name': 'stopSequenceTokens',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('config', {
            'name': 'config',
            'is_list': False,
            'optional': True,
            'type': 'fields.Json',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenantId', {
            'name': 'tenantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tenant', {
            'name': 'tenant',
            'is_list': False,
            'optional': True,
            'type': 'models.Tenant',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversations', {
            'name': 'conversations',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Conversation\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('agentTasks', {
            'name': 'agentTasks',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.AgentTask\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Conversation_relational_fields: Set[str] = {
        'agent',
        'agentTasks',
    }
_Conversation_fields: Dict['types.ConversationKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('agentId', {
            'name': 'agentId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('agent', {
            'name': 'agent',
            'is_list': False,
            'optional': True,
            'type': 'models.Agent',
            'is_relational': True,
            'documentation': None,
        }),
        ('agentTasks', {
            'name': 'agentTasks',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.AgentTask\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_AgentTask_relational_fields: Set[str] = {
        'agent',
        'conversation',
    }
_AgentTask_fields: Dict['types.AgentTaskKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('agentId', {
            'name': 'agentId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('agent', {
            'name': 'agent',
            'is_list': False,
            'optional': True,
            'type': 'models.Agent',
            'is_relational': True,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversationId', {
            'name': 'conversationId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversation', {
            'name': 'conversation',
            'is_list': False,
            'optional': True,
            'type': 'models.Conversation',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('deleted', {
            'name': 'deleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(License)
model_rebuild(Tenant)
model_rebuild(UserRole)
model_rebuild(User)
model_rebuild(UserSession)
model_rebuild(Candidate)
model_rebuild(Job)
model_rebuild(JobCandidate)
model_rebuild(Project)
model_rebuild(Agent)
model_rebuild(Conversation)
model_rebuild(AgentTask)
